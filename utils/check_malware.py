import requests
import time

# --- Configuration ---
# Replace 'YOUR_API_KEY' with your actual VirusTotal API key.
# You can get a free API key by signing up on the VirusTotal website.
API_KEY = 'YOUR_API_KEY'

# The list of URLs you want to check.
# I've included some example URLs. Replace these with your own list of PDF links.
URLS_TO_CHECK = [
    "http://www.malicious-site.com/malicious.pdf",
    "https://www.google.com",
    "http://some-unknown-site.com/document.pdf",
]

# --- Main Script ---

def check_urls(api_key, urls):
    """
    Checks a list of URLs against the VirusTotal API.

    Args:
        api_key: Your VirusTotal API key.
        urls: A list of URLs to check.
    """
    if not api_key or api_key == 'YOUR_API_KEY':
        print("Error: Please provide a valid VirusTotal API key.")
        return

    for url in urls:
        print(f"\n--- Checking URL: {url} ---")
        try:
            # Submit the URL to VirusTotal for scanning
            scan_id = submit_url_for_scanning(api_key, url)
            if scan_id:
                # Get the scan report
                get_scan_report(api_key, scan_id)
        except Exception as e:
            print(f"An error occurred: {e}")
        # VirusTotal API has a rate limit of 4 requests per minute for free accounts.
        # We'll wait 15 seconds between each request to avoid exceeding this limit.
        time.sleep(15)

def submit_url_for_scanning(api_key, url_to_scan):
    """
    Submits a URL to VirusTotal for scanning.

    Args:
        api_key: Your VirusTotal API key.
        url_to_scan: The URL to be scanned.

    Returns:
        The scan ID if the submission is successful, otherwise None.
    """
    url = 'https://www.virustotal.com/vtapi/v2/url/scan'
    params = {'apikey': api_key, 'url': url_to_scan}
    try:
        response = requests.post(url, data=params)
        if response.status_code == 200:
            json_response = response.json()
            if json_response['response_code'] == 1:
                print("URL submitted successfully for scanning.")
                return json_response['scan_id']
            else:
                print(f"Error submitting URL: {json_response['verbose_msg']}")
                return None
        else:
            print(f"Error: Received status code {response.status_code}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"An error occurred while submitting the URL: {e}")
        return None

def get_scan_report(api_key, resource):
    """
    Retrieves the scan report for a given resource (URL or scan ID).

    Args:
        api_key: Your VirusTotal API key.
        resource: The resource to retrieve the report for.
    """
    url = 'https://www.virustotal.com/vtapi/v2/url/report'
    params = {'apikey': api_key, 'resource': resource}
    try:
        response = requests.get(url, params=params)
        if response.status_code == 200:
            json_response = response.json()
            if json_response['response_code'] == 1:
                display_report(json_response)
            elif json_response['response_code'] == 0:
                print("The requested item is not in VirusTotal's dataset.")
            elif json_response['response_code'] == -2:
                print("The requested item is still being analyzed. Please try again later.")
            else:
                print(f"Error retrieving report: {json_response['verbose_msg']}")
        else:
            print(f"Error: Received status code {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"An error occurred while retrieving the report: {e}")

def display_report(report):
    """
    Displays the scan report in a user-friendly format.

    Args:
        report: The JSON report from VirusTotal.
    """
    print("\n--- Scan Report ---")
    if report.get('positives', 0) > 0:
        print(f"Malicious Detections: {report['positives']} / {report['total']}")
        print("This URL is considered MALICIOUS by one or more scanners.")
        print("\nDetails of detections:")
        for scanner, result in report['scans'].items():
            if result['detected']:
                print(f"- {scanner}: {result['result']}")
    else:
        print("This URL is considered SAFE by all scanners.")
    print(f"Scan Date: {report.get('scan_date', 'N/A')}")
    print(f"Permalink: {report.get('permalink', 'N/A')}")
    print("-------------------\n")

if __name__ == '__main__':
    check_urls(API_KEY, URLS_TO_CHECK)